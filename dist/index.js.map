{"version":3,"sources":["../src/index.ts","../src/components/DragDropX.tsx","../src/components/svg/UploadIcon.tsx","../src/utilities/Base64.ts"],"sourcesContent":["export { default as DragDropX } from './components/DragDropX';\n// export type { FileInfoInterface, DragDropXProps } from './components/DragDropX';","// import React, { ChangeEvent, DragEvent, useRef, useState } from \"react\";\n// import { X, FileText, Upload } from \"lucide-react\";\n// import { motion, AnimatePresence } from \"framer-motion\";\n// import Loading from \"./svg/Loading\";\n\n// let ImageComponent: any;\n// try {\n//   ImageComponent = require(\"next/image\").default;\n// } catch (e) {\n//   ImageComponent = ({ src, alt, layout, objectFit, className }: any) => (\n//     <img \n//       src={src} \n//       alt={alt} \n//       className={className} \n//       style={{ \n//         width: layout === \"fill\" ? \"100%\" : undefined, \n//         height: layout === \"fill\" ? \"100%\" : undefined,\n//         objectFit\n//       }} \n//     />\n//   );\n// }\n\n// export interface FileInfoInterface {\n//   name: string;\n//   size: number;\n//   url: string;\n//   type: string;\n// }\n\n// export interface DragDropXProps {\n//   width?: number;\n//   height?: number;\n//   onFileChange?: (fileInfo: FileInfoInterface | null) => void;\n//   acceptedFileTypes?: string[];\n// }\n\n// const initialFileInfos: FileInfoInterface = {\n//   name: \"\",\n//   size: 0,\n//   url: \"\",\n//   type: \"\",\n// };\n\n// export default function DragDropX({ \n//   width = 500, \n//   height = 300, \n//   onFileChange,\n//   acceptedFileTypes = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"text/plain\", \"application/pdf\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"application/vnd.ms-powerpoint\"]\n// }: DragDropXProps) {\n//   const [fileInfos, setFileInfos] = useState<FileInfoInterface>(initialFileInfos);\n//   const [isDragging, setIsDragging] = useState(false);\n//   const [loading, setLoading] = useState(false);\n//   const [progress, setProgress] = useState(0);\n//   const ref = useRef<HTMLInputElement | null>(null);\n\n//   const handleTriggerFile = () => ref.current?.click();\n\n//   const handleFile = (file: File) => {\n//     setLoading(true);\n//     setProgress(1);\n\n//     const interval = setInterval(() => {\n//       setProgress((prev) => {\n//         if (prev >= 100) {\n//           clearInterval(interval);\n//           setLoading(false);\n//           const fileInfo = {\n//             name: file.name,\n//             size: file.size,\n//             url: URL.createObjectURL(file),\n//             type: file.type,\n//           };\n//           setFileInfos(fileInfo);\n//           if (onFileChange) onFileChange(fileInfo);\n//           return 100;\n//         }\n//         return prev + 5;\n//       });\n//     }, 50);\n//   };\n\n//   const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0];\n//     if (file) handleFile(file);\n//   };\n\n//   const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\n//     e.preventDefault();\n//     setIsDragging(true);\n//   };\n\n//   const handleDragLeave = () => {\n//     setIsDragging(false);\n//   };\n\n//   const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n//     e.preventDefault();\n//     setIsDragging(false);\n\n//     const file = e.dataTransfer.files?.[0];\n//     if (file) handleFile(file);\n//   };\n\n//   const handleRemoveFile = (e: React.MouseEvent) => {\n//     e.stopPropagation();\n//     setFileInfos(initialFileInfos);\n//     if (onFileChange) onFileChange(null);\n//   };\n\n//   return (\n//     <div className=\"p-5 flex justify-center items-center\">\n//       <input\n//         ref={ref}\n//         type=\"file\"\n//         onChange={handleInputChange}\n//         accept={acceptedFileTypes.join(\",\")}\n//         className=\"hidden\"\n//       />\n\n//       <motion.div\n//         className={`relative rounded-lg border-2 ${isDragging ? \"border-blue-500 bg-blue-100\" : \"border-gray-300 bg-white\"} flex justify-center items-center cursor-pointer overflow-hidden transition-all`}\n//         style={{ width: `${width}px`, height: `${height}px` }}\n//         onClick={handleTriggerFile}\n//         onDragOver={handleDragOver}\n//         onDragLeave={handleDragLeave}\n//         onDrop={handleDrop}\n//       >\n//         <AnimatePresence>\n//           {loading ? (\n//             <motion.div\n//               className=\"flex flex-col items-center\"\n//               initial={{ opacity: 0 }}\n//               animate={{ opacity: 1 }}\n//               exit={{ opacity: 0 }}\n//             >\n//               <div className=\"relative w-16 h-16 flex items-center justify-center\">\n//                 <Loading progress={progress} />\n//                 <span className=\"absolute text-sm font-bold from-green-400/40 to-neutral-900 bg-opacity-70\">{progress}%</span>\n//               </div>\n//               <p className=\"text-gray-500 text-sm mt-2\">Uploading...</p>\n//             </motion.div>\n//           ) : !fileInfos.url ? (\n//             <motion.div\n//               className=\"flex flex-col items-center justify-center p-4\"\n//               initial={{ opacity: 0 }}\n//               animate={{ opacity: 1 }}\n//               exit={{ opacity: 0 }}\n//             >\n//               <Upload size={48} className=\"text-gray-400 mb-2\" />\n//               <motion.p className=\"text-gray-500 font-medium text-lg text-center\">\n//                 {isDragging ? \"Drop your file here\" : \"Click or Drag & Drop to Upload\"}\n//               </motion.p>\n//               <p className=\"text-gray-400 text-sm mt-2\">\n//                 Supported files: Images, PDF, DOCX, PPT, TXT\n//               </p>\n//             </motion.div>\n//           ) : fileInfos.type.startsWith(\"image\") ? (\n//             <motion.div\n//               className=\"w-full h-full relative\"\n//               initial={{ opacity: 0 }}\n//               animate={{ opacity: 1 }}\n//               exit={{ opacity: 0 }}\n//             >\n//               <ImageComponent\n//                 src={fileInfos.url}\n//                 alt=\"Uploaded Image\"\n//                 layout=\"fill\"\n//                 objectFit=\"cover\"\n//                 className=\"rounded-lg\"\n//               />\n\n//               <motion.button\n//                 onClick={handleRemoveFile}\n//                 className=\"absolute top-2 right-2 p-1 rounded-full bg-white hover:bg-gray-100 transition-colors shadow-sm\"\n//                 whileHover={{ scale: 1.1 }}\n//               >\n//                 <X size={20} className=\"text-gray-600\" />\n//               </motion.button>\n\n//               <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-b from-green-400/40 to-neutral-900 bg-opacity-70 text-white p-2\">\n//                 <p className=\"text-sm font-medium truncate\">{fileInfos.name}</p>\n//                 <p className=\"text-xs\">{(fileInfos.size / 1024).toFixed(2)} KB</p>\n//               </div>\n//             </motion.div>\n//           ) : (\n//             <motion.div\n//               className=\"flex flex-col items-center p-5 w-full\"\n//               initial={{ opacity: 0 }}\n//               animate={{ opacity: 1 }}\n//               exit={{ opacity: 0 }}\n//             >\n//               <FileText size={48} className=\"text-gray-500\" />\n//               <p className=\"text-gray-700 font-medium mt-2 text-center\">{fileInfos.name}</p>\n//               <p className=\"text-gray-500 text-sm\">{(fileInfos.size / 1024).toFixed(2)} KB</p>\n\n//               <motion.button\n//                 onClick={handleRemoveFile}\n//                 className=\"absolute top-2 right-2 p-1 rounded-full bg-white hover:bg-gray-100 transition-colors shadow-sm\"\n//                 whileHover={{ scale: 1.1 }}\n//               >\n//                 <X size={20} className=\"text-gray-600\" />\n//               </motion.button>\n\n//               <div className=\"absolute bottom-0 left-0 right-0 bg-green-500 bg-opacity-70 text-white p-2\">\n//                 <p className=\"text-sm font-medium truncate\">{fileInfos.name}</p>\n//                 <p className=\"text-xs\">{(fileInfos.size / 1024).toFixed(2)} KB</p>\n//               </div>\n//             </motion.div>\n//           )}\n//         </AnimatePresence>\n//       </motion.div>\n//     </div>\n//   );\n// }\n\n\"use client\"\nimport { ChangeEvent, useRef, useState, DragEvent } from \"react\";\nimport Image from \"next/image\";\nimport { X, File, FileText, FileImage, FileCode, FileArchive, FileAudio, FileVideo } from \"lucide-react\"\nimport UploadIcon from \"./svg/UploadIcon\";\nimport { Base64 } from \"../utilities/Base64\";\n\nlet ImageComponent: any;\ntry {\n  ImageComponent = require(\"next/image\").default;\n} catch (e) {\n  ImageComponent = ({ src, alt, layout, objectFit, className }: any) => (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      style={{\n        width: layout === \"fill\" ? \"100%\" : undefined,\n        height: layout === \"fill\" ? \"100%\" : undefined,\n        objectFit\n      }}\n    />\n  );\n}\n\nenum ResponseEnum {\n  DEFAULT = 'default',\n  BASE64 = 'base64',\n}\n\ninterface IncomingInterface {\n  name?: string\n  width?: number\n  height?: number\n  multiple?: boolean\n  accept?: string[]\n  response?: string\n  onFileChange?: (fileData: string[] | FileList | null) => void\n}\n\ninterface FileInfo {\n  url: string;\n  name: string;\n  size: string;\n  type: string;\n  isImage: boolean;\n}\n\nexport default function DragDropX({ name, width = 500, height = 300, multiple = false, accept = [\"*\"], response = \"default\", onFileChange }: IncomingInterface) {\n  const [files, setFiles] = useState<FileInfo[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const ref = useRef<HTMLInputElement | null>(null);\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) return <FileImage size={40} />;\n    if (type.startsWith('video/')) return <FileVideo size={40} />;\n    if (type.startsWith('audio/')) return <FileAudio size={40} />;\n    if (type.startsWith('text/')) return <FileText size={40} />;\n    if (type.includes('pdf')) return <FileText size={40} />;\n    if (type.includes('zip') || type.includes('compressed')) return <FileArchive size={40} />;\n    if (type.includes('javascript') || type.includes('json') || type.includes('html') || type.includes('css')) return <FileCode size={40} />;\n    return <File size={40} />;\n  };\n\n  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n    const selectedFiles = e.target.files;\n    if (!selectedFiles || selectedFiles.length === 0) return;\n\n    processFiles(selectedFiles);\n  };\n\n  const processFiles = async (selectedFiles: FileList) => {\n    if (response === ResponseEnum.BASE64) {\n      const base64Data = await Base64(selectedFiles);\n      onFileChange && onFileChange(base64Data);\n    } else if (response === ResponseEnum.DEFAULT) {\n      onFileChange && onFileChange(selectedFiles);\n    }\n\n    const fileArray = Array.from(selectedFiles);\n    const newFiles: FileInfo[] = fileArray.map(file => {\n      const isImage = file.type.startsWith('image/');\n      return {\n        url: URL.createObjectURL(file),\n        name: file.name,\n        size: formatFileSize(file.size),\n        type: file.type,\n        isImage\n      };\n    });\n\n    setFiles(prevFiles => [...prevFiles, ...newFiles]);\n  };\n\n  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n\n    const droppedFiles = e.dataTransfer.files;\n    if (droppedFiles.length > 0) {\n      if (!multiple && droppedFiles.length > 1) {\n        const firstFileOnly = new DataTransfer();\n        firstFileOnly.items.add(droppedFiles[0]);\n        processFiles(firstFileOnly.files);\n      } else {\n        processFiles(droppedFiles);\n      }\n    }\n  };\n\n  const removeFile = (index: number, e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setFiles(prevFiles => {\n      const newFiles = [...prevFiles];\n      newFiles.splice(index, 1);\n      return newFiles;\n    });\n\n    if (files.length <= 1) {\n      if (ref.current) {\n        ref.current.value = \"\";\n      }\n      onFileChange && onFileChange(null);\n    }\n  };\n\n  const removeAllFiles = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    setFiles([]);\n    if (ref.current) {\n      ref.current.value = \"\";\n    }\n    onFileChange && onFileChange(null);\n  };\n\n  const getLayoutClasses = (index: number, totalFiles: number) => {\n    if (totalFiles === 1) {\n      return \"w-full h-full\";\n    } else if (totalFiles === 2) {\n      return \"w-1/2 h-full\";\n    } else if (totalFiles === 3) {\n      if (index < 2) {\n        return \"w-1/2 h-1/2\";\n      } else {\n        return \"w-full h-1/2\";\n      }\n    } else {\n      if (totalFiles === 4 || index < 4) {\n        return \"w-1/2 h-1/2\";\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex justify-center mt-6\">\n      <div\n        onClick={() => ref.current && ref.current?.click()}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') ref.current?.click() }}\n        aria-label=\"Upload files\"\n        style={{ width, height }}\n        className={`relative cursor-pointer overflow-hidden flex items-center justify-center border-2 border-dotted rounded \n                    ${isDragging ? 'bg-blue-50 border-blue-300' : 'bg-[#F9F8FF] border-[#E0E0E0]'}`}\n      >\n        <input\n          {...(name ? { name } : {})}\n          onChange={handleFileChange}\n          type=\"file\"\n          accept={accept?.join(\",\")}\n          ref={ref}\n          {...(multiple ? { multiple } : {})}\n          className=\"hidden\"\n        />\n\n        {files.length === 0 ? (\n          <div className=\"flex flex-col gap-1 items-center\">\n            <div className={`w-[64px] h-[64px] flex justify-center items-center rounded-full bg-[rgba(109,77,255,0.08)]`}>\n              <UploadIcon />\n            </div>\n            <p>Drag & Drop</p>\n            <p>or <span className=\"underline cursor-pointer\">Browse</span> your files to upload</p>\n            <p>Supports all file formats</p>\n          </div>\n        ) : (\n          <div className=\"absolute inset-0 w-full h-full flex flex-wrap\">\n            {files.slice(0, 4).map((file, index) => (\n              <div\n                key={index}\n                className={`relative ${getLayoutClasses(index, files.length)}`}\n              >\n                <div className=\"relative w-full h-full p-1\">\n                  <div className=\"relative w-full h-full overflow-hidden rounded bg-gray-100 border border-gray-200\">\n                    {file.isImage ? (\n                      <>\n                        <ImageComponent\n                          src={file.url}\n                          alt={file.name}\n                          fill\n                          style={{ objectFit: \"cover\" }}\n                          className=\"hover:scale-[1.05] transition-all duration-300 ease-in-out\"\n                        />\n                        <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-60 px-2 py-1 text-white text-xs truncate\">\n                          <p className=\"truncate font-medium\">{file.name}</p>\n                          <p>{file.size}</p>\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"flex flex-col items-center justify-center h-full p-2\">\n                        <div className=\"text-gray-500 mb-2\">\n                          {getFileIcon(file.type)}\n                        </div>\n                        <p className=\"text-center text-sm font-medium truncate w-full\">{file.name}</p>\n                        <p className=\"text-gray-500 text-xs\">{file.size}</p>\n                        <p className=\"text-gray-500 text-xs\">{file.type || \"Unknown type\"}</p>\n                      </div>\n                    )}\n                    <div className=\"absolute right-2 top-2\">\n                      <button\n                        onClick={(e) => removeFile(index, e)}\n                        className=\"p-1 bg-slate-100 hover:bg-slate-50 rounded-full z-10\"\n                      >\n                        <X width={18} height={18} stroke=\"#222\" />\n                      </button>\n                    </div>\n\n                    {index === 3 && files.length > 4 && (\n                      <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                        <span className=\"text-white text-2xl font-bold\">+{files.length - 4}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {files.length > 0 && (\n              <button\n                onClick={removeAllFiles}\n                className=\"absolute right-2 top-2 p-2 bg-red-100 hover:bg-red-200 rounded z-10 text-sm text-red-700\"\n              >\n                Clear All\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}","interface IconInterface {\n    width?: string\n    height?: string\n    stroke?: string\n}\nexport default function UploadIcon({ width = \"26\", height = \"24\", stroke = \"#8D899F\" }: IconInterface) {\n    return (\n        <svg width={width} height={height} viewBox=\"0 0 26 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M4.17969 12V20C4.17969 20.5304 4.39981 21.0391 4.79162 21.4142C5.18344 21.7893 5.71486 22 6.26897 22H18.8047C19.3588 22 19.8902 21.7893 20.282 21.4142C20.6739 21.0391 20.894 20.5304 20.894 20V12\" stroke=\"#8D899F\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            <path d=\"M16.7126 6L12.534 2L8.35547 6\" stroke={stroke} strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n            <path d=\"M12.5352 2V15\" stroke={stroke} strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n        </svg>\n    )\n}","export const Base64 = async (files: FileList | null): Promise<string[]> => {\n    if (!files) { return Promise.resolve([]) }\n    const ArrayList = Array.from(files);\n    return Promise.all(\n        ArrayList.map(file => {\n            return new Promise<string>((resolve, reject) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file)\n                reader.onload = () => resolve(reader.result as string)\n                reader.onerror = reject\n            })\n        })\n    )\n}"],"mappings":"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","names":["import_jsx_runtime"]}